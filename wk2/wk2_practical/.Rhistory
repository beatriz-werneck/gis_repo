1+5
4*5^2
C
C
C
C
A <- 1
B <- 2
C <- A+B
print('hello 🌍')
print('C')
print(C)
A <- 1
B <- 2
C <- A+B
C
C
print('hello 🌍')
print(C)
c <- a+b
a <- 1
b <- 2
c <- a+b
print(c)
C
a <- 1
A <- 1
B <- 2
C <- A+B
C
B <- 5
C
C <- A+B
C
C
C
a <- 1
B <- 5
C <- A+B
C
ls ()
rm(A)
#create some datasets, first a vector of 1-100 and 101-200
Data1 <- c(1:100)
Data2 <- c(101:200)
#Plot the data
plot(Data1, Data2, col="red")
#just for fun, create some more, this time some normally distributed vectors of 100 numbers
Data3 <- rnorm(100, mean = 53, sd=34)
Data4 <- rnorm(100, mean = 64, sd=14)
#plot
plot(Data3, Data4, col="blue")
df <- data.frame(Data1, Data2)
plot(df, col="green")
#import packages
library(tidyverse)
install.packages(c("sf", "tmap", "tmaptools", "RSQLite", "tidyverse"),
repos = "https://www.stats.bris.ac.uk/R/")
install.packages(c("sf", "tmap", "tmaptools", "tidyverse"),
repos = "https://www.stats.bris.ac.uk/R/")
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(fs)
detach("package:fs", unload = TRUE)
install.packages("tmap")
install.packages("tmaptools")
install.packages("RSQLite")
#import packages
library(tidyverse)
#show the first 10 and then last 10 rows of data in df...
df %>%
head()
df %>%
tail()
View(df)
data.frame[row,column]
View(df)
View(df)
data.frame[1,1]
df[1,1]
df[1,2]
df[12,2]
df[1:10, 1]
df[5:15,]
df[c(2,3,6),2]
View(df)
df[,1]
library(dplyr)
df <- df %>%
dplyr::rename(column1 = Data1, column2=Data2)
View(df)
df %>%
dplyr::select(column1)
df$column1
df[["column1"]]
#import packages
library(tidyverse)
library(dplyr)
LondonDataOSK <- read.csv("ward-profiles-excel-version.csv",
sep=",")
View(LondonDataOSK)
View(LondonDataOSK)
library(dplyr)
library(janitor)
library(OpenStreetMap)
library(Rcpp)
library(readr)
library(sf)
library(stringr)
library(tmap)
library(tmaptools)
#read the geojson we downloaded
EW <- st_read("/Users/beatrizwerneck/Documents/URBAN_SPATIAL_SCIENCES/GIS/wk2/practical_2/data_practical_2/LAD_Dec_2015_FCB_GB_2022.geojson")
#read the data in straight from the web
LondonData <- read_csv("https://data.london.gov.uk/download/f33fb38c-cb37-48e3-8298-84c0d3cc5a6c/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
locale = locale(encoding = "latin1"),
na = "n/a")
#plot London map
LondonMap <- EW %>%
filter(str_detect(lad15cd, "^E09"))
qtm(LondonMap)
#clean up all the names with janitor
LondonData <- clean_names(LondonData)
BoroughtDataMap <- EW %>%
clean_names() %>%
filter(str_detect(lad15cd, "^E09")) %>%
merge(.,
LondonData,
by.x = "lad15cd",
by.y = "new_code",
no.dups = TRUE) %>%
distinct(., lad15cd,
.keep_all = TRUE)
tmap_mode("plot")
qtm(BoroughtDataMap,
fill = "employment_rate_16_64_2011")
library(dplyr)
library(janitor)
library(OpenStreetMap)
library(Rcpp)
library(readr)
library(sf)
library(stringr)
library(tmap)
library(tmaptools)
#read the geojson we downloaded
EW <- st_read("/Users/beatrizwerneck/Documents/URBAN_SPATIAL_SCIENCES/GIS/wk2/practical_2/data_practical_2/LAD_Dec_2015_FCB_GB_2022.geojson")
#read the data in straight from the web
LondonData <- read_csv("https://data.london.gov.uk/download/f33fb38c-cb37-48e3-8298-84c0d3cc5a6c/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
locale = locale(encoding = "latin1"),
na = "n/a")
#plot London map
LondonMap <- EW %>%
filter(str_detect(lad15cd, "^E09"))
qtm(LondonMap)
#clean up all the names with janitor
LondonData <- clean_names(LondonData)
BoroughtDataMap <- EW %>%
clean_names() %>%
filter(str_detect(lad15cd, "^E09")) %>%
merge(.,
LondonData,
by.x = "lad15cd",
by.y = "new_code",
no.dups = TRUE) %>%
distinct(., lad15cd,
.keep_all = TRUE)
tmap_mode("plot")
qtm(BoroughtDataMap,
fill = "employment_rate_16_64_2011")
library(dplyr)
library(janitor)
library(OpenStreetMap)
library(Rcpp)
library(readr)
library(sf)
library(stringr)
library(tmap)
library(tmaptools)
#read the geojson we downloaded
EW <- st_read("/Users/beatrizwerneck/Documents/URBAN_SPATIAL_SCIENCES/GIS/wk2/practical_2/data_practical_2/LAD_Dec_2015_FCB_GB_2022.geojson")
#read the data in straight from the web
LondonData <- read_csv("https://data.london.gov.uk/download/f33fb38c-cb37-48e3-8298-84c0d3cc5a6c/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
locale = locale(encoding = "latin1"),
na = "n/a")
#plot London map
LondonMap <- EW %>%
filter(str_detect(lad15cd, "^E09"))
qtm(LondonMap)
#clean up all the names with janitor
LondonData <- clean_names(LondonData)
BoroughtDataMap <- EW %>%
clean_names() %>%
filter(str_detect(lad15cd, "^E09")) %>%
merge(.,
LondonData,
by.x = "lad15cd",
by.y = "new_code",
no.dups = TRUE) %>%
distinct(., lad15cd,
.keep_all = TRUE)
# READ OSM DOESN'T WORK !!!! FATAL ERROR -> ASK IN CLASS
#------------------------------------------------------------
#tmap_mode("plot")
#qtm(BoroughtDataMap,
#    fill = "employment_rate_16_64_2011")
#using a base map for create a static map
#tmaplondon <- BoroughtDataMap %>%
# st_bbox gives the bounding x and y coordinates
#  st_bbox(.) %>%
#  tmaptools::read_osm(., type = "esri", zoom = NULL)
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(World) +
tm_borders()
?tm_basemap
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(BoroughtDataMap, bbox = st_bbox(BoroughtDataMap)) +
tm_borders()
tm_basemap("OpenStreetMap") +
tm_shape(BoroughtDataMap, bbox = st_bbox(BoroughtDataMap)) +
tm_borders()
tmaplondon <- BoroughtDataMap %>%
tm_basemap("OpenStreetMap") +
tm_shape(BoroughtDataMap, bbox = st_bbox(BoroughtDataMap)) +
tm_borders()
tmap_mode("view")
tmaplondon <- BoroughtDataMap %>%
tm_basemap("OpenStreetMap") +
tm_shape(BoroughtDataMap, bbox = st_bbox(BoroughtDataMap)) +
tm_borders()
class(BoroughtDataMap)
tmap_mode("view")
tmaplondon <- tm_shape(BoroughtDataMap) +
tm_borders()
tmap_mode("plot")
tm_shape(tmaplondon) +
tm_rgb() +
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks",
fill_alpha = 0.5),
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scale_bar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 2,
position = c("center", "top"))
tmap_mode("plot")
tm_shape(tmaplondon) +
tm_rgb() +
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scale_bar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 2,
position = c("center", "top"))
tmap_mode("plot")
tm_shape(tmaplondon) +
tm_rgb() +
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scalebar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 2,
position = c("center", "top"))
View(BoroughtDataMap)
class(BoroughtDataMap)
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scalebar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 2,
position = c("center", "top"))
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scalebar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 2,
position = c("center", "top"))
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scalebar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 1,
position = c("center", "top"))
tm_shape(BoroughtDataMap) +
tm_polygons(fill = "employment_rate_16_64_2011",
fill.scale = tm_scale_intervals(values = "brewer.bu_pu",
style = "jenks"),
fill_alpha = 0.5,
fill.legend = tm_legend(title = "Employment rate 2011",
size = 0.8)) +
tm_compass(type = "arrow", position = c("left", "bottom")) +
tm_scalebar(position = c("left", "bottom")) +
tm_title("Employment rate 2011",
size = 1,
position = c("left", "top"))
View(tmaplondon)
tmaplondon <- tm_shape(BoroughtDataMap) +
tm_borders()
# THIS FILE SOULD BE CONNECTED WITH THE FIRST FILE OF THE PRACTICAL 2, SO IT CAN USE THEIR OBJECTS? HOW TO DO THIS?
#read the data in straight from the web
LondonData <- read_csv("https://data.london.gov.uk/download/f33fb38c-cb37-48e3-8298-84c0d3cc5a6c/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
locale = locale(encoding = "latin1"),
na = "n/a")
library(readr)
flytipping <- read_csv("https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv")
flytipping <- read_csv("https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv",
col_types = cols(
code = col_character(),
area = col_character(),
year = col_character(),
total_incidents = col_number(),
total_action_taken = col_number(),
warning_letters = col_number(),
fixed_penalty_notices = col_number(),
statutory_notices = col_number(),
formal_cautions = col_number(),
injunctions = col_number(),
prosecutions = col_number()
))
view(flytipping)
View(flytipping)
library(tidyverse)
flytipping1 <- read_csv("https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv",
col_types = cols(
code = col_character(),
area = col_character(),
year = col_character(),
total_incidents = col_number(),
total_action_taken = col_number(),
warning_letters = col_number(),
fixed_penalty_notices = col_number(),
statutory_notices = col_number(),
formal_cautions = col_number(),
injunctions = col_number(),
prosecutions = col_number()
))
library(readr)
library(tidyverse)
flytipping1 <- read_csv("https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv",
col_types = cols(
code = col_character(),
area = col_character(),
year = col_character(),
total_incidents = col_number(),
total_action_taken = col_number(),
warning_letters = col_number(),
fixed_penalty_notices = col_number(),
statutory_notices = col_number(),
formal_cautions = col_number(),
injunctions = col_number(),
prosecutions = col_number()
))
library(readr)
library(tidyverse)
flytipping1 <- read_csv("https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv",
col_types = cols(
code = col_character(),
area = col_character(),
year = col_character(),
total_incidents = col_number(),
total_action_taken = col_number(),
warning_letters = col_number(),
fixed_penalty_notices = col_number(),
statutory_notices = col_number(),
formal_cautions = col_number(),
injunctions = col_number(),
prosecutions = col_number()
))
View(flytipping)
flytipping_long <- flytipping1 %>%
pivot_longer(
cols = 4:11,
names_to = "tipping_type",
values_to = "count"
)
# view the data
view(flytipping_long)
#pivot the tidy tibble into one that is suitable for mapping
flytipping_wide <- flytipping_long %>%
pivot_wider(
id_cols = 1:2,
names_from = c(year,tipping_type),
names_sep = "_",
values_from = count
)
view(flytipping_wide)
Hidewidefly <- flytipping2 %>%
pivot_wider(
names_from = year,
values_from = total_incidents)
widefly <- flytipping2 %>%
pivot_wider(
names_from = year,
values_from = total_incidents)
#an alternative which just pulls everything out into a single table
flytipping2 <- flytipping1[,1:4]
widefly <- flytipping2 %>%
pivot_wider(
names_from = year,
values_from = total_incidents)
View(widefly)
View(widefly)
